// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('Luminosity');

//---------------ACCOUNTS----------------
// db.runCommand( { collMod: "accounts",
//     validator: {
//         $jsonSchema: {
//             bsonType: "object",
//             title: "accounts",
//             required: ["lastUpdated"],
//             properties: {
//                 creationDate: {
//                     bsonType: "date"
//                 },
//                 deletionDate: {
//                     bsonType: ["date", "null"]
//                 },
//                 lastUpdated: {
//                     bsonType: "date"
//                 },
//                 email: {
//                     bsonType: "string",
//                     pattern: "^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$"
//                 },
//                 name: {
//                     bsonType: "string"
//                 },
//                 devicesLinked: {
//                     bsonType: [ "array" ],
//                     uniqueItems: true,
//                     items: {
//                         bsonType: "objectId"
//                     }
//                 }
//             }
//       }
//    },
//    validationLevel: "strict"
// } )


// db.accounts.insertOne( {
//    _id: ObjectId('6360f5b9c2da459f35c3ad33'),
//    creationDate: new Date(),
//    deletionDate: null,
//    lastUpdated: new Date(),
//    email: "jchhan.17@gmail.com",
//    name: "Xoikz",
//    devicesLinked:[]
// } )
//PASS

// db.accounts.insertOne( {
//    _id: ObjectId('6360f5b9c2da459f35c3ad33'),
//    creationDate: new Date(),
//    deletionDate: new Date(),
//    lastUpdated: new Date(),
//    email: "test.test@gmail.com",
//    name: "Test",
//    devicesLinked:[ObjectId("6360f5b9c2d6669035c3ad31")]
// } )
//PASS


// db.accounts.insertOne( {
//    _id: ObjectId('6360f5b9c2da459f35c3ad33'),
//    creationDate: new Date(),
//    deletionDate: null,
//    lastUpdated: new Date(),
//    email: "jchhan17gmail@.com",
//    name: "Xoikz",
//    devicesLinked:[ObjectId("6360f5b9c2d6669035c3ad31")]
// } )
//FAIL: invalid email

//db.accounts.find({_id: ObjectId("6360f5b9c2da459f35c3ad33")})




//-----------------DEVICES----------------
// db.runCommand( { collMod: "devices",
//     validator: {
//         $jsonSchema: {
//             bsonType: "object",
//             title: "devices",
//             required: ["lastUpdated"],
//             properties: {
//                 uuid: {
//                     bsonType: "string"
//                 },
//                 lastUpdated: {
//                     bsonType: "date"
//                 },
//                 powered:{
//                     bsonType: "bool"
//                 },
//                 poweredTimestamp:{
//                     bsonType: "date"
//                 },
//                 connected: {
//                     bsonType: "bool"
//                 },
//                 connectedTimestamp:{
//                     bsonType: "date"
//                 },
//                 color: {
//                     bsonType: "string",
//                 },
//                 colorTimestamp:{
//                     bsonType: "date"
//                 },
//                 brightness: {
//                     bsonType: "int",
//                     minimum: 0,
//                     maximum: 100,
//                     exclusiveMaximum: false
//                 },
//                 brightnessTimestamp:{
//                     bsonType: "date"
//                 }
//             }
//       }
//    },
//    validationLevel: "strict"
// } )

//Remove Validator
// db.runCommand( { collMod: "devices",
//     validator: {},
//     validationLevel: "off"
// } )

//Get Collections Info
db.getCollectionInfos()
// db.devices.getIndexes()

//Delete everything in devices
//  db.devices.deleteMany(({ }))

//Deletes a Device with specific _id
// db.runCommand(
//     {
//     delete: "Devices",
//     deletes: [{q: {_id: ObjectId("6360f5b9c2d6669035c3ad31")}, limit: 1}]
//     }
// )

// db.devices.insertOne( {
//     _id: ObjectId("6360f5b9c2d6669035c3ad31"),
//     uuid: "md0LI556",
//     lastUpdated: new Date(),
//     powered: true,
//     poweredTimestamp: new Date(),
//     connected: true,
//     connectedTimestamp: new Date(),
//     color: "#ffffff",
//     colorTimestamp: new Date(),
//     brightness: 100,
//     brightnessTimestamp: new Date(),
// } )
// PASS :: Can also pass if things other than lastUpdated are missing 

// db.devices.insertOne( {
//     _id: ObjectId("6360f5b9c2d6669035c3ad32"),
//     uuid: "md0LI556",
//     lastUpdated: new Date(),

//     powered: true,
//     poweredTimestamp: new Date(),
//     connected: true,
//     connectedTimestamp: new Date(),
//     color: "#ffffff",
//     colorTimestamp: new Date(),
//     brightness: 100,
//     brightnessTimestamp: new Date(),
// } )
// FAIL: Dupe uuid

// db.devices.insertOne( {
//     uuid: "LLD34F57",
//     lastUpdated: undefined,

//     powered: true,
//     poweredTimestamp: new Date(),
//     connected: true,
//     connectedTimestamp: new Date(),
//     color: "#ffffff",
//     colorTimestamp: new Date(),
//     brightness: 100,
//     brightnessTimestamp: new Date(),
// } )
//FAIL: lastUpdated must be a Date

// db.devices.insertOne( {
//     uuid: "LLD34F57",
//     lastUpdated: undefined,

//     powered: true,
//     poweredTimestamp: new Date(),
//     connected: true,
//     connectedTimestamp: new Date(),
//     color: "#ffffff",
//     colorTimestamp: new Date(),
//     brightness: -100,
//     brightnessTimestamp: new Date(),
// } )
//FAIL: brightness is out of range(0,100)

//Update One
// db.devices.updateOne(
//    { uuid: "7LD34F56" },
//    {
//      $set: { connected: false},
//      $currentDate: { lastUpdated: true, connectedTimestamp: true }
//    }
// )