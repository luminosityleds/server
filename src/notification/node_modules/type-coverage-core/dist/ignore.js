"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectIgnoreMap = void 0;
const ts = require("typescript");
const utils = require("tsutils/util");
function collectIgnoreMap(sourceFile, file) {
    const ingoreMap = {};
    utils.forEachComment(sourceFile, (_, comment) => {
        var _a, _b;
        const commentText = comment.kind === ts.SyntaxKind.SingleLineCommentTrivia
            ? sourceFile.text.substring(comment.pos + 2, comment.end).trim()
            : sourceFile.text.substring(comment.pos + 2, comment.end - 2).trim();
        if (commentText.includes('type-coverage:ignore-next-line')) {
            if (!ingoreMap[file]) {
                ingoreMap[file] = new Set();
            }
            const line = ts.getLineAndCharacterOfPosition(sourceFile, comment.pos).line;
            (_a = ingoreMap[file]) === null || _a === void 0 ? void 0 : _a.add(line + 1);
        }
        else if (commentText.includes('type-coverage:ignore-line')) {
            if (!ingoreMap[file]) {
                ingoreMap[file] = new Set();
            }
            const line = ts.getLineAndCharacterOfPosition(sourceFile, comment.pos).line;
            (_b = ingoreMap[file]) === null || _b === void 0 ? void 0 : _b.add(line);
        }
    });
    return ingoreMap;
}
exports.collectIgnoreMap = collectIgnoreMap;
